{"name":"Logist","tagline":"Easy logging for humans and machines","body":"Logist\r\n------\r\n\r\nEasy logging for humans and machines\r\n \r\n```logging``` in standard library is wonderful. But if you want something simpler, \r\nready-to-use and blazing fast, ```Logist``` is for you! Logist is a redis backed logging system\r\nwith a performance of 6000 logs/second.\r\n \r\n \r\n## Documentation\r\n\r\n### Installation\r\n\r\n```bash\r\npip install logist\r\n```\r\n    \r\n### Basic Usage\r\n\r\n```python\r\nfrom logist import Logist\r\nlogger = Logist()\r\nlogger.log(log_type, sub_type, description, log_time)\r\n```\r\n\r\n**log_type:** type of log - ERROR, WARNING, SUCCESS, INFO, DEBUG\r\n\r\n**sub_type:** custom log sub types for easy tracking - Eg: ACCESS, WRITE, READ, EDIT, DELETE\r\n\r\n**description:** brief log description\r\n\r\n**log_time:** time of the logging - else auto populate\r\n\r\n\r\n\r\n### Configuration Options\r\n\r\nREDIS_ADDRESS: Address to redis server\r\nREDIS_PORT: redis server port\r\nFLUSH_COUNT: log count when in-memory logs to be flushed to file\r\nFILE_SIZE: file size when log file to be split up and compressed\r\nLOG_FILE_NAME: name of the log file\r\nLOG_FOLDER: folder for log files\r\nNAMESPACE: a custom namespace for logs to be kept in redis server\r\nCOMPRESSION: a boolean field to enable/disable compression (True/False)\r\n\r\n\r\nEither, create a configuration file with name ```logist_config.json``` in the pwd, like below\r\n\r\n```json\r\n{\r\n    \"REDIS_ADDRESS\": \"localhost\",\r\n    \"REDIS_PORT\": 6379,\r\n    \"FLUSH_COUNT\": 10000,\r\n    \"FILE_SIZE\": 10000000,\r\n    \"LOG_FILE_NAME\": \"\",\r\n    \"LOG_FOLDER\": \"\",\r\n    \"NAMESPACE\": \"PROJECT_NAME\",\r\n    \"COMPRESSION\": true\r\n}\r\n```\r\n\r\nor\r\n\r\ncreate Logist objects with custom configuration options required as shown below\r\n\r\n```python\r\nlogger = Logist(redis_address=\"localhost\", redis_port=6379, flush_count=10000, file_size=10000000,\r\n                 log_file_name=\"default\", log_folder=\"\", namespace=\"DEFAULT\", compression=True)\r\n```\r\n\r\n\r\n### Specific Functions\r\n\r\n#### Success\r\n```python\r\nlogger.success(\"API_LOOKUP\", \"20301 bytes of json data served\")\r\n```\r\n\r\n#### Warning\r\n```python\r\nlogger.warning(\"API_LOOKUP\", \"301 bytes of json data served\")\r\n```\r\n\r\n#### Info\r\n```python\r\nlogger.info(\"API_LOOKUP\", \"20301 bytes of json data served\")\r\n```\r\n\r\n#### Error\r\n```python\r\nlogger.error(\"API_LOOKUP_ERROR\", \"0 bytes of json data served\")\r\n```\r\n\r\n#### Debug\r\n```python\r\nlogger.debug(\"API_LOOKUP_DEBUG\", \"2301 bytes of csv data served\")\r\n```\r\n\r\n\r\n### Advanced Features\r\n\r\n#### Filter\r\n\r\nAdvanced feature to filter logs as required based on log_type, sub_type, description and log_location.\r\nforce_refresh is used to reload the index from the source file/memory\r\n\r\n```python\r\nlogger.filter(log_type=\"\", sub_type=\"\", description=\"\", log_location=\"memory\", force_refresh=False)\r\n```\r\nNB: Exact match for ```log_type``` and ```sub_type```. Contains for ```description```\r\n\r\n\r\n#### Count\r\n\r\nAdvanced feature to filter logs as required based on log_type, sub_type, description and log_location.\r\nforce_refresh is used to reload the index from the source file/memory\r\n\r\n```python\r\nlogger.count(log_type=\"\", sub_type=\"\", description=\"\", log_location=\"memory\", force_refresh=False)\r\n```","google":"UA-72226457-1","note":"Don't delete this file! It's used internally to help with page regeneration."}